{
    "version": "15.0.7",
    "vulnerabilities": [
        {
            "id": "372d3cffd9bcdb59c0416ce16a9b25a6acf4698e68e5f6cf604b2239b4025163",
            "category": "sast",
            "name": "Improper neutralization of special elements in data query logic",
            "description": "Untrusted user input in findOne() function can result in NoSQL Injection.\n",
            "cve": "semgrep_id:nodejs_scan.javascript-database-rule-node_nosqli_injection:23:23",
            "severity": "Critical",
            "scanner": {
                "id": "semgrep",
                "name": "Semgrep"
            },
            "location": {
                "file": "zoo-management-system/authentication-service/routes/auth.js",
                "start_line": 23
            },
            "identifiers": [
                {
                    "type": "semgrep_id",
                    "name": "nodejs_scan.javascript-database-rule-node_nosqli_injection",
                    "value": "nodejs_scan.javascript-database-rule-node_nosqli_injection"
                },
                {
                    "type": "cwe",
                    "name": "CWE-943",
                    "value": "943",
                    "url": "https://cwe.mitre.org/data/definitions/943.html"
                },
                {
                    "type": "owasp",
                    "name": "A03:2021 - Injection",
                    "value": "A03:2021"
                },
                {
                    "type": "owasp",
                    "name": "A1:2017 - Injection",
                    "value": "A1:2017"
                },
                {
                    "type": "njsscan_rule_type",
                    "name": "NodeJS Scan ID javascript-database-rule-node_nosqli_injection",
                    "value": "Untrusted user input in findOne() function can result in NoSQL Injection."
                }
            ]
        },
        {
            "id": "6deeeb2aa7b6d1a10c0a28438f3e8e020e4aaeb38ecabc78b80aac25b9dd0274",
            "category": "sast",
            "name": "Improper neutralization of special elements used in an OS command ('OS Command Injection')",
            "description": "User controlled data in 'shelljs.exec()' can result in Remote OS Command Execution.\n",
            "cve": "semgrep_id:nodejs_scan.javascript-exec-rule-shelljs_os_command_exec:42:48",
            "severity": "Critical",
            "scanner": {
                "id": "semgrep",
                "name": "Semgrep"
            },
            "location": {
                "file": "zoo-management-system/animal-management-service/app.js",
                "start_line": 42,
                "end_line": 48
            },
            "identifiers": [
                {
                    "type": "semgrep_id",
                    "name": "nodejs_scan.javascript-exec-rule-shelljs_os_command_exec",
                    "value": "nodejs_scan.javascript-exec-rule-shelljs_os_command_exec"
                },
                {
                    "type": "cwe",
                    "name": "CWE-78",
                    "value": "78",
                    "url": "https://cwe.mitre.org/data/definitions/78.html"
                },
                {
                    "type": "owasp",
                    "name": "A03:2021 - Injection",
                    "value": "A03:2021"
                },
                {
                    "type": "owasp",
                    "name": "A1:2017 - Injection",
                    "value": "A1:2017"
                },
                {
                    "type": "njsscan_rule_type",
                    "name": "NodeJS Scan ID javascript-exec-rule-shelljs_os_command_exec",
                    "value": "User controlled data in 'shelljs.exec()' can result in Remote OS Command Execution."
                }
            ]
        },
        {
            "id": "55043c1ac8b0f9785efb48fed0f1f036433a5fb2ff67d0b0e04d96286ff2aaac",
            "category": "sast",
            "name": "URL redirection to untrusted site 'open redirect'",
            "description": "Passing untrusted user input in `redirect()` can result in an open redirect\nvulnerability. This could be abused by malicious actors to trick users into \nbeing redirected to websites under their control to capture authentication\ninformation.  \nTo prevent open redirect vulnerabilities:\n\n- Always validate and sanitize user inputs, especially URL parameters\n or query strings that may influence the flow of the application.\n- Use allowlists (lists of permitted URLs) to validate redirect targets \n against known, trusted URLs before performing the redirect.\n- Avoid directly using user input for redirecting. If unavoidable, ensure\n strict validation against an allowlist.\n\nFollowing is an example of secure validation against allowlist to prevent the vulnerability:\n ```\n // Define a list of explicitly allowed URLs for redirection\n const allowedUrls = [\n     'https://www.example.com/page1',\n     'https://www.example.com/page2',\n     'https://secure.example.com/page3'\n ];\n\n app.get('/redirect/:url', (req, res) =\u003e {\n     const url = decodeURIComponent(req.params.url);\n     const isAllowed = allowedUrls.includes(url);\n     if (isAllowed) {\n         // If the URL is allowed, proceed with the redirect\n         res.redirect(url);\n     } else {\n         res.status(400).send('Invalid redirect URL');\n     }\n });\n ```\n",
            "cve": "semgrep_id:nodejs_scan.javascript-redirect-rule-express_open_redirect:40:40",
            "severity": "Critical",
            "scanner": {
                "id": "semgrep",
                "name": "Semgrep"
            },
            "location": {
                "file": "zoo-management-system/authentication-service/routes/auth.js",
                "start_line": 40
            },
            "identifiers": [
                {
                    "type": "semgrep_id",
                    "name": "nodejs_scan.javascript-redirect-rule-express_open_redirect",
                    "value": "nodejs_scan.javascript-redirect-rule-express_open_redirect"
                },
                {
                    "type": "cwe",
                    "name": "CWE-601",
                    "value": "601",
                    "url": "https://cwe.mitre.org/data/definitions/601.html"
                },
                {
                    "type": "owasp",
                    "name": "A03:2021 - Injection",
                    "value": "A03:2021"
                },
                {
                    "type": "owasp",
                    "name": "A1:2017 - Injection",
                    "value": "A1:2017"
                },
                {
                    "type": "njsscan_rule_type",
                    "name": "NodeJS Scan ID javascript-redirect-rule-express_open_redirect",
                    "value": "Untrusted user input in redirect() can result in Open Redirect vulnerability."
                }
            ]
        },
        {
            "id": "e0cc85bbef7cbaf604605e523e893fabe10a8629d61688ca9e662e1ea2677d37",
            "category": "sast",
            "name": "Server-side request forgery (SSRF)",
            "description": "User controlled URL in http client libraries can result in Server Side Request Forgery (SSRF).\n",
            "cve": "semgrep_id:nodejs_scan.javascript-ssrf-rule-node_ssrf:11:19",
            "severity": "Critical",
            "scanner": {
                "id": "semgrep",
                "name": "Semgrep"
            },
            "location": {
                "file": "zoo-management-system/preview-service/app.js",
                "start_line": 11,
                "end_line": 19
            },
            "identifiers": [
                {
                    "type": "semgrep_id",
                    "name": "nodejs_scan.javascript-ssrf-rule-node_ssrf",
                    "value": "nodejs_scan.javascript-ssrf-rule-node_ssrf"
                },
                {
                    "type": "cwe",
                    "name": "CWE-918",
                    "value": "918",
                    "url": "https://cwe.mitre.org/data/definitions/918.html"
                },
                {
                    "type": "owasp",
                    "name": "A03:2021 - Injection",
                    "value": "A03:2021"
                },
                {
                    "type": "owasp",
                    "name": "A1:2017 - Injection",
                    "value": "A1:2017"
                },
                {
                    "type": "njsscan_rule_type",
                    "name": "NodeJS Scan ID javascript-ssrf-rule-node_ssrf",
                    "value": "User controlled URL in http client libraries can result in Server Side Request Forgery (SSRF)."
                }
            ]
        },
        {
            "id": "9b2ec30b9e031af3beb1835f2f22cbd261431984e333bd0e6ca80337033e7da3",
            "category": "sast",
            "name": "Improper neutralization of input during web page generation ('Cross-site Scripting')",
            "description": "The application was found calling `dangerouslySetInnerHTML` which may lead to Cross Site\nScripting (XSS). By default, React components will encode the data properly before rendering.\nCalling `dangerouslySetInnerHTML` disables this encoding and allows raw markup\nand JavaScript to be executed.\n\nXSS is an attack which exploits a web application or system to treat\nuser input as markup or script code. It is important to encode the data, depending on the\nspecific context it is used in. There are at least six context types:\n\n- Inside HTML tags `\u003cdiv\u003econtext 1\u003c/div\u003e`\n- Inside attributes: `\u003cdiv class=\"context 2\"\u003e\u003c/div\u003e`\n- Inside event attributes `\u003cbutton onclick=\"context 3\"\u003ebutton\u003c/button\u003e`\n- Inside script blocks: `\u003cscript\u003evar x = \"context 4\"\u003c/script\u003e`\n- Unsafe element HTML assignment: `element.innerHTML = \"context 5\"`\n- Inside URLs: `\u003ciframe src=\"context 6\"\u003e\u003c/iframe\u003e\u003ca href=\"context 6\"\u003elink\u003c/a\u003e`\n\nScript blocks alone have multiple ways they need to be encoded. Extra care must be taken if\nuser input\nis ever output inside of script tags.\n\nUser input that is displayed within the application must be encoded, sanitized or validated\nto ensure it cannot be treated as HTML or executed as Javascript code. Care must also be\ntaken\nto not mix server-side templating with client-side templating, as the server-side templating\nwill\nnot encode things like {{ 7*7 }} which may execute client-side templating features.\n\nIt is _NOT_ advised to encode user input prior to inserting into a data store. The data will\nneed to be\nencoded depending on context of where it is output. It is much safer to force the displaying\nsystem to\nhandle the encoding and not attempt to guess how it should be encoded.\n\nRemove the call to `dangerouslySetInnerHTML` or ensure that the data used in this call does\nnot come from user-supplied input.\n\nFor more information on dangerously setting inner HTML see:\n- https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html\n",
            "cve": "semgrep_id:eslint.react-dangerouslysetinnerhtml:116:116",
            "severity": "Medium",
            "scanner": {
                "id": "semgrep",
                "name": "Semgrep"
            },
            "location": {
                "file": "zoo-management-system/frontend/src/components/AnimalManagement.js",
                "start_line": 116
            },
            "identifiers": [
                {
                    "type": "semgrep_id",
                    "name": "eslint.react-dangerouslysetinnerhtml",
                    "value": "eslint.react-dangerouslysetinnerhtml",
                    "url": "https://semgrep.dev/r/gitlab.eslint.react-dangerouslysetinnerhtml"
                },
                {
                    "type": "cwe",
                    "name": "CWE-79",
                    "value": "79",
                    "url": "https://cwe.mitre.org/data/definitions/79.html"
                },
                {
                    "type": "owasp",
                    "name": "A03:2021 - Injection",
                    "value": "A03:2021"
                },
                {
                    "type": "owasp",
                    "name": "A7:2017 - Cross-Site Scripting (XSS)",
                    "value": "A7:2017"
                },
                {
                    "type": "eslint_rule_id",
                    "name": "ESLint rule ID/react-dangerouslysetinnerhtml",
                    "value": "react-dangerouslysetinnerhtml"
                }
            ]
        },
        {
            "id": "52fa43f6a9f51687f5bfe0cc6130f9891396b401c0f869b3ca41c15b82976ec7",
            "category": "sast",
            "name": "Improper neutralization of input during web page generation ('Cross-site Scripting')",
            "description": "The application was found calling `dangerouslySetInnerHTML` which may lead to Cross Site\nScripting (XSS). By default, React components will encode the data properly before rendering.\nCalling `dangerouslySetInnerHTML` disables this encoding and allows raw markup\nand JavaScript to be executed.\n\nXSS is an attack which exploits a web application or system to treat\nuser input as markup or script code. It is important to encode the data, depending on the\nspecific context it is used in. There are at least six context types:\n\n- Inside HTML tags `\u003cdiv\u003econtext 1\u003c/div\u003e`\n- Inside attributes: `\u003cdiv class=\"context 2\"\u003e\u003c/div\u003e`\n- Inside event attributes `\u003cbutton onclick=\"context 3\"\u003ebutton\u003c/button\u003e`\n- Inside script blocks: `\u003cscript\u003evar x = \"context 4\"\u003c/script\u003e`\n- Unsafe element HTML assignment: `element.innerHTML = \"context 5\"`\n- Inside URLs: `\u003ciframe src=\"context 6\"\u003e\u003c/iframe\u003e\u003ca href=\"context 6\"\u003elink\u003c/a\u003e`\n\nScript blocks alone have multiple ways they need to be encoded. Extra care must be taken if\nuser input\nis ever output inside of script tags.\n\nUser input that is displayed within the application must be encoded, sanitized or validated\nto ensure it cannot be treated as HTML or executed as Javascript code. Care must also be\ntaken\nto not mix server-side templating with client-side templating, as the server-side templating\nwill\nnot encode things like {{ 7*7 }} which may execute client-side templating features.\n\nIt is _NOT_ advised to encode user input prior to inserting into a data store. The data will\nneed to be\nencoded depending on context of where it is output. It is much safer to force the displaying\nsystem to\nhandle the encoding and not attempt to guess how it should be encoded.\n\nRemove the call to `dangerouslySetInnerHTML` or ensure that the data used in this call does\nnot come from user-supplied input.\n\nFor more information on dangerously setting inner HTML see:\n- https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html\n",
            "cve": "semgrep_id:eslint.react-dangerouslysetinnerhtml:70:70",
            "severity": "Medium",
            "scanner": {
                "id": "semgrep",
                "name": "Semgrep"
            },
            "location": {
                "file": "zoo-management-system/frontend/src/components/Booking.js",
                "start_line": 70
            },
            "identifiers": [
                {
                    "type": "semgrep_id",
                    "name": "eslint.react-dangerouslysetinnerhtml",
                    "value": "eslint.react-dangerouslysetinnerhtml",
                    "url": "https://semgrep.dev/r/gitlab.eslint.react-dangerouslysetinnerhtml"
                },
                {
                    "type": "cwe",
                    "name": "CWE-79",
                    "value": "79",
                    "url": "https://cwe.mitre.org/data/definitions/79.html"
                },
                {
                    "type": "owasp",
                    "name": "A03:2021 - Injection",
                    "value": "A03:2021"
                },
                {
                    "type": "owasp",
                    "name": "A7:2017 - Cross-Site Scripting (XSS)",
                    "value": "A7:2017"
                },
                {
                    "type": "eslint_rule_id",
                    "name": "ESLint rule ID/react-dangerouslysetinnerhtml",
                    "value": "react-dangerouslysetinnerhtml"
                }
            ]
        },
        {
            "id": "f14c57ced9d32924f9afe786ce21fb9fffe849c5c3c0c8f051eb0f56ec58fca258cdd3fe7e07cf608c11d1986b1ed0d5e980bc9d8192f3854c9572c5d096a172_0",
            "category": "sast",
            "name": "Improper Authentication",
            "description": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token.",
            "severity": "Warning",
            "scanner": {
                "id": "semgrep",
                "name": "Semgrep"
            },
            "location": {
                "file": "zoo-management-system/ticket-booking-service/middleware/auth.js",
                "start_line": 10,
                "end_line": 10,
                "start_col": 18,
                "end_col": 35
            },
            "identifiers": [
                {
                    "type": "semgrep_id",
                    "name": "javascript.jsonwebtoken.security.audit.jwt-decode-without-verify.jwt-decode-without-verify",
                    "value": "javascript.jsonwebtoken.security.audit.jwt-decode-without-verify.jwt-decode-without-verify",
                    "url": "https://semgrep.dev/r/javascript.jsonwebtoken.security.audit.jwt-decode-without-verify.jwt-decode-without-verify"
                },
                {
                    "type": "cwe",
                    "name": "CWE-345",
                    "value": "345",
                    "url": "https://cwe.mitre.org/data/definitions/345.html"
                },
                {
                    "type": "owasp",
                    "name": "A08:2021 - Software and Data Integrity Failures",
                    "value": "A08:2021",
                    "url": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
                }
            ],
            "extra": {
                "engine_kind": "OSS",
                "is_ignored": false,
                "lines": "    const user = jwt.decode(token); // Decoding the token without verifying",
                "metadata": {
                    "asvs": {
                        "control_id": "3.5.3 Insecue Stateless Session Tokens",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "confidence": "LOW",
                    "cwe": ["CWE-345: Insufficient Verification of Data Authenticity"],
                    "impact": "LOW",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "LOW",
                    "owasp": ["A08:2021 - Software and Data Integrity Failures"],
                    "references": ["https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9302,
                            "rule_id": "KxUbL3",
                            "rv_id": 109894,
                            "url": "https://semgrep.dev/playground/r/DkT6nrZ/javascript.jsonwebtoken.security.audit.jwt-decode-without-verify.jwt-decode-without-verify",
                            "version_id": "DkT6nrZ"
                        }
                    },
                    "shortlink": "https://sg.run/J9YP",
                    "source": "https://semgrep.dev/r/javascript.jsonwebtoken.security.audit.jwt-decode-without-verify.jwt-decode-without-verify",
                    "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
                    "subcategory": ["audit"],
                    "technology": ["jwt"],
                    "vulnerability_class": ["Improper Authentication"]
                },
                "metavars": {
                    "$JWT": {
                        "abstract_content": "jwt",
                        "start": {
                            "col": 18,
                            "line": 10,
                            "offset": 336
                        },
                        "end": {
                            "col": 21,
                            "line": 10,
                            "offset": 339
                        }
                    },
                    "$TOKEN": {
                        "abstract_content": "token",
                        "start": {
                            "col": 29,
                            "line": 10,
                            "offset": 347
                        },
                        "end": {
                            "col": 34,
                            "line": 10,
                            "offset": 352
                        },
                        "propagated_value": {
                            "svalue_abstract_content": "authHeader&&authHeader.split(' ')[1]",
                            "svalue_start": {
                                "col": 17,
                                "line": 6,
                                "offset": 178
                            },
                            "svalue_end": {
                                "col": 55,
                                "line": 6,
                                "offset": 216
                            }
                        }
                    }
                }
            }
        }

    ]
}