import ast
from dotenv import load_dotenv
from langchain_community.document_loaders import TextLoader
from langchain.text_splitter import CharacterTextSplitter
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.chains.retrieval_qa.base import RetrievalQA
from langchain_openai import OpenAI

load_dotenv()

def read_text(text_path, question):
    text_path = text_path
    loader = TextLoader(text_path)
    documents = loader.load()
    text_splitter = CharacterTextSplitter(
        chunk_size=1000, chunk_overlap=30, separator="\n"
    )
    docs = text_splitter.split_documents(documents=documents)

    embeddings = OpenAIEmbeddings()
    vectorstore = FAISS.from_documents(docs, embeddings)
    # vectorstore.save_local("exploiter/reader/data/readme_index")

    # vectorstore = FAISS.load_local(
    #     "exploiter/reader/data/readme_index", embeddings, allow_dangerous_deserialization=True
    # )

    qa = RetrievalQA.from_chain_type(
        llm=OpenAI(temperature=0), chain_type="stuff", retriever=vectorstore.as_retriever()
    )

    res = qa.invoke(question)
    print(res['result'])
    return res['result']

def read_read_me(data):
    "Return app_name and guideline in Python or example usage of a CVE form from CVE path and extract_type"
    data_dict = ast.literal_eval(data)

    CVE_path = data_dict['path']
    extract_type = data_dict['extract_type']
    if extract_type == 'usage':
        question = "I have only 1 server that I want to exploit. \
                                1. What is the shorten English name of app related to the CVE? \
                                2. What is the example command usage that exploits vulnerability and optional request_method (POST/GET)?"
    elif extract_type == 'guideline':
        question = """You are an AI assistant that generates Python scripts based on the instructions provided in a README.md file. Follow these steps
            1. Carefully read the provided README.md content and identify the key steps and commands required to exploit the vulnerability.
            2. Create a well-structured Python script that follows the instructions in the README.md file to exploit the vulnerability.
            3. Use clear and concise variable names and include comments to explain the purpose of each section of the script.
            4. Ensure that the generated script is readable, maintainable, and follows Python best practices and conventions.
            5. Test the generated script to make sure it runs without errors and successfully exploits the vulnerability as described in the README.md file.
            6. If any information is missing or unclear in the README.md file, make reasonable assumptions or ask for clarification when needed.
            7. Provide the generated Python script as the output, wrapped in triple backticks (```python ... ```) to format it as code.
            8. Extract app_name as comment
        """
    return read_text(text_path=f"{CVE_path}/README.md",
                     question=question)

def read_dockerfile(app_name):
    "Return url_link on broswer for a specific app given app_name"
    return read_text(text_path="sec-ai-challenge-hack-main/docker-compose.yml",
                     question=f"I am running on localhost, based on the information in the dockerfile,\
                                give me the port on browser related to {app_name}. Then give me the url_link")

if __name__ == "__main__":
    print(read_read_me)
    
