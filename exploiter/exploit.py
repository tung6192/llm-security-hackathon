import fire
from dotenv import load_dotenv
from langchain import hub
from langchain_openai import ChatOpenAI
from langchain.agents import create_react_agent, AgentExecutor
from langchain_core.tools import Tool
from langchain_google_community import GoogleSearchAPIWrapper
from exploiter.query.query_text_file import read_read_me, read_dockerfile, clone_repo
from exploiter.query.query_input_content import get_username_and_password, summarize_content
from exploiter.agent_action.python_executor import python_agent_executor
from exploiter.prompts import prompts, task_prompts



load_dotenv()

search = GoogleSearchAPIWrapper()

def top_results(query):
    return search.results(query, 5)

def exploit_cve(cve_number: str):
    base_prompt = hub.pull("langchain-ai/react-agent-template")

    ##### ROUNTER AGENT #####
    def python_agent_executor_wrapper(original_prompt):
        return python_agent_executor.invoke({"input": original_prompt})

    tools = [
        Tool(
            name="Python Agent",
            func=python_agent_executor_wrapper,
            description="""useful when you need to transform natual language to python and execute the python code,
                           returning the results of the code execution
                           DO NOT ACCEPT CODE AS INPUT""",
        ),
        Tool(
            name="Information Extraction Agent",
            func=get_username_and_password,
            description="""useful when you need to extract username and password""",
        ),
        Tool(
            name="READ_ME AGENT",
            func=read_read_me,
            description="""useful when you need to read a readme file given a parameter data.\
                Data is a dict with path: str type and extract_type: str type where value either 'usage' or 'guideline'""",
        ),
        Tool(
            name="DOCKERFILE AGENT",
            func=read_dockerfile,
            description="""useful when you need to read a dockerfile given app_name""",
        ),
        Tool(
            name="Summarize content",
            func=summarize_content,
            description="""useful when you need to summarize content""",
        ),
        Tool(
            name="Clone a repo given an url",
            func=clone_repo,
            description="""useful when you need to clone a repo""",
        ),
        Tool(
            name="google_search",
            description="Search Google for recent results.",
            func=top_results,
        ),
    ]
    prompt = base_prompt.partial(instructions="")
    router_agent = create_react_agent(
        prompt=prompt, llm=ChatOpenAI(temperature=0, model='gpt-4'), tools=tools
    )
    router_agent_executor = AgentExecutor(agent=router_agent, tools=tools, verbose=True, 
                                          return_intermediate_steps=True)
    
    prompt = prompts[cve_number]
    task_prompt = task_prompts[prompt['task']]
    input_dict = {"input": f"Given the CVE name: {cve_number}. Follow below steps to give me my answer. Do not skip any step\
                        1. Search github url for {cve_number}. \
                        2. Provide me first URL link. For example: https://github.com/walnutsecurity/cve-2021-42013\
                        3. Clone the repo. Return repo local path \
                        4. Path: exploiter/repo/{cve_number}. Extract_type: usage. {task_prompt['readme_output']}\
                        5. Read dockerfile from this file `sec-ai-challenge-hack-main/docker-compose.yml` \
                            to get the app's mapping port of host machine and its url_link on broswer \
                        6. Rewrite the {prompt['task']} using previous {prompt['task']}, port and url_link of the app \
                        7. Use Python Agent to do the following:\
                            7.1. Change dir to folder relevant with CVE name with full path above\
                            7.2. {task_prompt['final_command']}\
                        8. {prompt['target']} \
                "}
    return router_agent_executor, input_dict


if __name__ == "__main__":
    fire.Fire(exploit_cve)
