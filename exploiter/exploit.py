import fire
from dotenv import load_dotenv
from langchain import hub
from langchain_openai import AzureChatOpenAI
from langchain.agents import create_react_agent, AgentExecutor
from langchain_core.tools import Tool
from exploiter.query.query_text_file import read_read_me, read_dockerfile
from exploiter.query.query_input_content import get_username_and_password, summarize_content
from exploiter.agent_action.python_executor import python_agent_executor
from exploiter.prompts import prompts, task_prompts


load_dotenv()


def main(cve_number: str):
    base_prompt = hub.pull("langchain-ai/react-agent-template")

    ##### ROUNTER AGENT #####
    def python_agent_executor_wrapper(original_prompt):
        return python_agent_executor.invoke({"input": original_prompt})

    tools = [
        Tool(
            name="Python Agent",
            func=python_agent_executor_wrapper,
            description="""useful when you need to transform natual language to python and execute the python code,
                           returning the results of the code execution
                           DO NOT ACCEPT CODE AS INPUT""",
        ),
        Tool(
            name="Information Extraction Agent",
            func=get_username_and_password,
            description="""useful when you need to extract username and password""",
        ),
        Tool(
            name="READ_ME AGENT",
            func=read_read_me,
            description="""useful when you need to read a readme file given 2 parameters: \
                path: str type and extract_type: str type where value either 'usage' or 'guideline'""",
        ),
        Tool(
            name="DOCKERFILE AGENT",
            func=read_dockerfile,
            description="""useful when you need to read a dockerfile given app_name""",
        ),
        Tool(
            name="Summarize content",
            func=summarize_content,
            description="""useful when you need to summarize content""",
        ),
    ]
    prompt = base_prompt.partial(instructions="")
    router_agent = create_react_agent(
        prompt=prompt, llm=AzureChatOpenAI(temperature=0, azure_deployment='gpt-4'), tools=tools
    )
    router_agent_executor = AgentExecutor(agent=router_agent, tools=tools, verbose=True, handle_parsing_errors=True)
    
    prompt = prompts[cve_number]
    task_prompt = task_prompts[prompt['task']]
    print(
        router_agent_executor.invoke(
            {"input": f"Given the CVE name: {cve_number}.Follow below steps to give me my answer\
                        1. Use Python Agent to do the following:\
                                1.1. List all folder in following folder exploiter/repo. \
                                For example: ['CVE-123-45632', 'CVE-2002-1324'] \
                                1.2. Return the folder that relevant with CVE name with full path \
                                For example: exploiter/repo/CVE-2002-1324 \
                        2. {task_prompt['readme_output']}\
                        3. Read dockerfile from sec-ai-challenge-hack-main/docker-compose.yml to get the app's mapping port of host machine and its url_link on broswer \
                        For example: App_mapping port: 9000, url_link: http://localhost:9000 \
                        4. Rewrite the {prompt['task']} using previous {prompt['task']}, port and url_link of the app \
                        5. Use Python Agent to do the following:\
                            5.1. Change dir to folder relevant with CVE name with full path above\
                            5.2. {task_prompt['final_command']}\
                        6. {prompt['target']} \
            "}
        )
    )


if __name__ == "__main__":
    fire.Fire(main)
