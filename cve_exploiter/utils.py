import json
import requests
import yaml
from copy import deepcopy


def extract_code_block(text, output_file):
    start_index = text.find("```python")
    end_index = text.find("```", start_index + 1)

    if start_index != -1 and end_index != -1:
        code_block = text[start_index + 9:end_index].strip()

        with open(output_file, "w", encoding='utf-8') as file:
            file.write(code_block)
        print(f"Code block extracted and written to {output_file}")

    else:
        print("No Python code block found in the text.")


def get_target_input_data(target_id):
    with open('input_data/hack-phase-cve-targets.json', 'r', encoding='utf-8') as file:
        data = json.load(file)

    for target in data['targets']:
        for cve in target['cves']:
            if cve['id'] == target_id:
                cve_data = deepcopy(cve)
                cve_data['target'] = target['name']
                return cve_data

    raise ValueError(f'Target `{target_id}` Not Found.')


def get_readme_content(github_url):

    repo_parts = github_url.split('/')
    user = repo_parts[3]
    repo = repo_parts[4]
    sub_folder = '/'.join(repo_parts[7:])  # Join the remaining parts as the sub-folder

    readme_url = f"https://raw.githubusercontent.com/{user}/{repo}/master/{sub_folder}/README.md"

    response = requests.get(readme_url, timeout=30)
    if response.status_code == 200:
        return response.text

    raise requests.exceptions.RequestException(
        f"Failed to retrieve README.md content. Status code: {response.status_code}"
    )


def get_service_port(service_name):

    with open('sec-ai-challenge-hack-main/docker-compose.yml', 'r', encoding='utf-8') as file:
        docker_compose = yaml.safe_load(file)

    if service_name not in docker_compose['services']:
        raise ValueError(f'Service {service_name} Not Found.')

    service = docker_compose['services'][service_name]
    ports = service['ports']

    for port_mapping in ports:
        if ':' in port_mapping:
            host_port, _ = port_mapping.split(':')
            return host_port.strip()
        return port_mapping.strip()
