"""
Generates a Python script to exploit the vulnerability
based on the instructions in the README file.
"""

import os
from dotenv import load_dotenv
from langchain.prompts import PromptTemplate
from langchain_openai import AzureChatOpenAI

from .utils import (
    extract_code_block,
    get_target_input_data,
    get_readme_content,
    get_service_port
)

load_dotenv()


def get_exploiting_script(cve_id, file_name):

    prompt = PromptTemplate(
        input_variables=["service_port", "readme_content"],
        template="""
        You are an AI assistant that generates Python scripts to exploit vulnerabilities based on the instructions provided in a README.md file. Follow these steps to generate the script:

        1. Carefully read the provided README.md content and identify the key steps and commands required to exploit the vulnerability.
        2. Create a well-structured Python script that follows the instructions in the README.md file to exploit the vulnerability.
        3. Use clear and concise variable names and include comments to explain the purpose of each section of the script.
        4. Ensure that the generated script is readable, maintainable, and follows Python best practices and conventions.
        5. Test the generated script to make sure it runs without errors and successfully exploits the vulnerability as described in the README.md file.
        6. If any information is missing or unclear in the README.md file, make reasonable assumptions or ask for clarification when needed.
        7. Provide the generated Python script as the output, wrapped in triple backticks (```python ... ```) to format it as code.

        Please note that:
        - The vulnerable service is running in localhost on port {service_port}.
        - You must change the ip and port in the python script according to the running vulnerable service.
        - You must print after each step, so that I can know what steps were just run.
        - For instructions that require using `requests` library to send requests, try to use prepare request, instead of the high-level API of requests.
        ```python
        url = "http://example.com/../something.txt"
        s = requests.Session()
        req = requests.Request(method='POST' ,url=url, headers=headers, data=data)
        prep = req.prepare()
        prep.url = url
        r = s.send(prep, verify=False)
        ```
        - If you need to escape string in order to pass as a parameter to use in url, use the below snippet:
        ```python
        urllib.parse.quote_plus(s.strip())
        ```

        Here is the README.md content:

        {readme_content}
        """
    )

    llm = AzureChatOpenAI(
        temperature=0,
        azure_deployment='gpt-4'
    )

    llm_chain = prompt | llm

    cve_data = get_target_input_data(cve_id)
    target_port = get_service_port(cve_data['target'])
    readme_content = get_readme_content(cve_data['github'])

    response = llm_chain.invoke(input={
        'service_port': target_port,
        'readme_content': readme_content
    })

    extract_code_block(response.content, file_name)
